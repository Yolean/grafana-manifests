apiVersion: v1
kind: Service
metadata:
  annotations:
    traefik.ingress.kubernetes.io/affinity: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "3000"
    prometheus.io/scrape: "true"
  labels:
    name: grafana
  name: grafana
spec:
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
    - name: grafana
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      name: grafana
    spec:
      securityContext:
        fsGroup: 65533 # to make SSH key readable
      containers:
        - name: grafana
          image: grafana/grafana:7.0.0-ubuntu@sha256:d4fe3f23dcf9e106419eed2573607fa09e5160475ac4e9ba9021f8f79073efba
          env:
            # - name: GF_SERVER_ROOT_URL
            #   value: https://demo-grafana.com
            - name: GF_PATHS_DATA
              value: /data
            - name: GF_PATHS_PLUGINS
              value: /data/plugins
            - name: GF_PATHS_PROVISIONING
              value: /provisioning
            - name: GF_SECURITY_ALLOW_EMBEDDING
              value: "true"
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: admin-password
                  name: grafana-secrets
            - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
              value: "Admin"
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_USERS_ALLOW_ORG_CREATE
              value: "false"
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_ANALYTICS_REPORTING_ENABLED
              value: "false"
            - name: GF_ALERTING_ENABLED
              value: "false"
            - name: GF_SMTP_ENABLED
              value: "false"
            - name: GF_LOG_MODE
              value: console
            - name: GF_INSTALL_PLUGINS
              value: grafana-piechart-panel,grafana-clock-panel
            - name: GF_SERVER_ENABLE_GZIP
              value: "true"
            - name: GF_METRICS_ENABLED
              value: "true"
            - name: GF_EXPLORE_ENABLED
              value: "true"
            - name: GF_RENDERING_SERVER_URL
              value: http://127.0.0.1:8081/render
            - name: GF_RENDERING_CALLBACK_URL
              value: http://127.0.0.1:3000/
          ports:
            - containerPort: 3000
              name: web
              protocol: TCP
          resources:
            requests:
              cpu: "0"
              memory: 100Mi
            limits:
              memory: 1000Mi
          livenessProbe:
            httpGet:
              path: /api/health
              port: web
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /api/health
              port: web
              scheme: HTTP
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /provisioning
              name: grafana
            - mountPath: /dashboards
              name: dashboards
        - name: renderer
          image: grafana/grafana-image-renderer:2.0.0
          env:
            - name: ENABLE_METRICS
              value: "true"
          ports:
            - containerPort: 8081
              name: renderer
              protocol: TCP
        - name: git-sync
          image: k8s.gcr.io/git-sync:v3.1.6
          env:
            - name: GIT_SYNC_REPO
              value: "https://github.com/Yolean/grafana-dashboards"
            - name: GIT_SYNC_DEST
              value: "repo"
            - name: GIT_SYNC_ROOT
              value: "/dashboards"
            - name: GIT_SYNC_MAX_SYNC_FAILURES
              value: "5"
          securityContext:
            runAsUser: 65533 # git-sync user
          volumeMounts:
            - mountPath: /dashboards
              name: dashboards
      volumes:
        - emptyDir: {}
          name: data
        - configMap:
            items:
              - key: dashboards.yaml
                path: dashboards/dashboards.yaml
              - key: datasources.yaml
                path: datasources/datasources.yaml
            name: grafana
          name: grafana
        - emptyDir: {}
          name: dashboards
